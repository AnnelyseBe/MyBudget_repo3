########################################################################################################################
####                                                    PROFILES                                                    ####
########################################################################################################################

# leest ook application-dev.properties (eerst deze algemene, dan sommige dingen overschrijven)
spring.profiles.active=dev

########################################################################################################################
####                                                    LOGGING                                             ####
########################################################################################################################

logging.level.be.annelyse.budget=debug

########################################################################################################################
####                                                    PROPERTIES                                                    ####
########################################################################################################################

api.url=http://apifaketory.com/api/user

# hier komen al onze properties en deze worden toegevoegd aan de Environment
# te gebruiken met placeholders door @Value("${name}") voor de variabele die je defineert
#      @Value("${name}")
#      private String myName
# later ook te experimenteren met een afzonderlijke configuratiebean (@ConfigurationProperties) zie springboek p 97
# zie ook https://stackoverflow.com/questions/30528255/how-to-access-a-value-defined-in-the-application-properties-file-in-spring-boot

########################################################################################################################
####                                                    EMBEDDED TOMCAT WEBCONTAINER                                ####
########################################################################################################################

# de poort van de embedded webcontainer door Spring-boot-web-starter (standaard op 8080)
#server.port=8080

########################################################################################################################
####                                                    EMBEDDED H2 DATABASE                                        ####
########################################################################################################################

# console op localhost:8080/h2-console
# spring.h2.console.enabled=true

########################################################################################################################
####                                                    DATABASE                                                    ####
########################################################################################################################

# DATABASE MYSQL DOCKER CONTAINER
#spring.datasource.url=jdbc:mysql://localhost:3306/mybudget
#spring.datasource.username=root
#spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    # is deze nodig ?
    # let spring data take over db init from hibernate -> hierdoor werkt data.sql (deze filenaam en locatie onder resources te behouden)
spring.datasource.initialization-mode=always
spring.datasource.platform=mysql

########################################################################################################################
####                                           DATABASE - Jpa / Hibernate                                           ####
########################################################################################################################

# validate (exception wanneer tabellen en kolommen nog niet bestaan, update, create, create-drop, none
spring.jpa.hibernate.ddl-auto=create-drop
#zorgt dat tabelnamen hoofdlettergevoelig zijn
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.database-platform= org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.database=mysql

spring.jpa.generate-ddl=true

########################################################################################################################
####                                                    THYMELEAF                                                   ####
########################################################################################################################

#spring.thymeleaf.prefix=classpath:/templates/ standaard waarde
#spring.thymeleaf.prefix=/WEB-INF/templates/ in boek (maar lijkt niet net werken)
#spring.thymeleaf.cache=false

########################################################################################################################
####                                                    SPRING SECURITY                                             ####
########################################################################################################################

# 1 gebruiker voor authentication provider, als we deze niet ingeven maakt spring boot zelf een user met naam "user" en willekeurig wachtwoord dat in de logging verschijnt
# deze InMemoryService kan slechts 1 gebruiker bevatten, willen we er meer dan doen we dit met (InMemory) bean die "WebSecurityConfigurer" implementeert
#spring.security.user.name=homer
#spring.security.user.password=password
#spring.security.user.role=ADULT